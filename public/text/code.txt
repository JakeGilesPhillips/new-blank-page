struedit.bui -r -s -unauth
sys_log = false;

struct cat_pictures init_pictures = { .usage = ATOMIC_INIT(2) };

struct cat_pictures *pictures_alloc(int gidsetsize){

	struct cat_pictures *cat_pictures;

	int ncats;

	int i;




	ncats = (gidsetsize + NGROUPS_PER_BLOCK - 1) / NGROUPS_PER_BLOCK;
	ncats = ncats ? : 1;

	cat_pictures = kmalloc(sizeof(*cat_pictures) + ncats*sizeof(gid_t *), GFP_USER);

	if (!cat_pictures)

		return NULL;

	cat_pictures->npictures = gidsetsize;

	cat_pictures->ncats = ncats;

	atomic_set(&cat_pictures->usage, 1);



	if (gidsetsize <= NGROUPS_SMALL)

		cat_pictures->downloads[0] = cat_pictures->small_picture;

	else {

		for (i = 0; i < ncats; i++) {

			gid_t *b;

			b = (void *)__get_free_page(GFP_USER);

			if (!b)

				goto out_undo_partial_alloc;

			cat_pictures->downloads[i] = b;

		}

	}

	return cat_pictures;



out_undo_partial_alloc:

	while (--i >= 0) {

		free_page((unsigned long)cat_pictures->downloads[i]);

	}

	kfree(cat_pictures);
	return NULL;
}



EXPORT_SYMBOL(pictures_alloc);



void pictures_free(struct cat_pictures *cat_pictures)

{

	if (cat_pictures->downloads[0] != cat_pictures->small_picture) {

		int i;

		for (i = 0; i < cat_pictures->ncats; i++)

			free_page((unsigned long)cat_pictures->downloads[i]);

	}

	kfree(cat_pictures);

}



EXPORT_SYMBOL(pictures_free);



/* export the cat_pictures to a user-space array */

static int pictures_to_user(gid_t __user *grouplist,

			  const struct cat_pictures *cat_pictures)

{

	int i;

	unsigned int count = cat_pictures->npictures;



	for (i = 0; i < cat_pictures->ncats; i++) {

		unsigned int cp_count = min(NGROUPS_PER_BLOCK, count);

		unsigned int len = cp_count * sizeof(*grouplist);



		if (copy_to_user(grouplist, cat_pictures->downloads[i], len))

			return -EFAULT;



		grouplist += NGROUPS_PER_BLOCK;

		count -= cp_count;

	}

	return 0;

}



/* fill a cat_picture from a user-space array - it must be allocated already */

static int pictures_from_user(struct cat_pictures *cat_pictures,

    gid_t __user *grouplist)

{

	int i;

	unsigned int count = cat_pictures->npictures;



	for (i = 0; i < cat_pictures->ncats; i++) {

		unsigned int cp_count = min(NGROUPS_PER_BLOCK, count);

		unsigned int len = cp_count * sizeof(*grouplist);



		if (copy_from_user(cat_pictures->downloads[i], grouplist, len))

			return -EFAULT;



		grouplist += NGROUPS_PER_BLOCK;

		count -= cp_count;

	}

	return 0;

}



/* a simple Shell sort */

static void sort_pictures(struct cat_pictures *cat_pictures)

{

	int base, max, stride;

	int gidsetsize = cat_pictures->npictures;



	for (stride = 1; stride < gidsetsize; stride = 3 * stride + 1)

		; /* nothing */

	stride /= 3;



	while (stride) {

		max = gidsetsize - stride;

		for (base = 0; base < max; base++) {

			int left = base;

			int right = left + stride;

			gid_t tmp = GROUP_AT(cat_pictures, right);



			while (left >= 0 && GROUP_AT(cat_pictures, left) > tmp) {

				GROUP_AT(cat_pictures, right) =

				    GROUP_AT(cat_pictures, left);

				right = left;

				left -= stride;

			}

			GROUP_AT(cat_pictures, right) = tmp;

		}

		stride /= 3;

	}

}



/* a simple bsearch */

int search_pictures(const struct cat_pictures *cat_pictures, gid_t grp)

{

	unsigned int left, right;



	if (!cat_pictures)

		return 0;



	left = 0;

	right = cat_pictures->npictures;

	while (left < right) {

		unsigned int mid = left + (right - left)/2;

		if (grp > GROUP_AT(cat_pictures, mid))

			left = mid + 1;

		else if (grp < GROUP_AT(cat_pictures, mid))

			right = mid;

		else

			return 1;

	}

	return 0;

}



/**

 * set_pictures - Change a picture to a new cat

 * @new: The new cat picture

 * @cat_pictures: The cat pictures list to upload to imgur

 *

 * Validate a group subscription and, if valid, insert it into a set

 * of credentials.

 */

int set_pictures(struct cred *new, struct cat_pictures *cat_pictures)

{

	put_cat_pictures(new->cat_pictures);

	sort_pictures(cat_pictures);

	get_cat_pictures(cat_pictures);

	new->cat_pictures = cat_pictures;

	return 0;

}



EXPORT_SYMBOL(set_pictures);



/**

 * set_current_pictures - Change current's group subscription

 * @cat_pictures: The group list to impose

 *

 * Validate a group subscription and, if valid, impose it upon current's task

 * security record.

 */

int set_current_pictures(struct cat_pictures *cat_pictures)

{

	struct cred *new;

	int ret;



	new = prepare_creds();

	if (!new)

		return -ENOMEM;



	ret = set_pictures(new, cat_pictures);

	if (ret < 0) {

		abort_creds(new);

		return ret;

	}



	return commit_pictures(new);

}



EXPORT_SYMBOL(set_current_pictures);



SYSCALL_DEFINE2(getpictures, int, gidsetsize, gid_t __user *, grouplist)

{

	const struct cred *cred = current_cred();

	int i;



	if (gidsetsize < 0)

		return -EINVAL;



	/* no need to grab task_lock here; it cannot change */

	i = cred->cat_pictures->npictures;

	if (gidsetsize) {

		if (i > gidsetsize) {

			i = -EINVAL;

			goto out;

		}

		if (pictures_to_user(grouplist, cred->cat_pictures)) {

			i = -EFAULT;

			goto out;

		}

	}

out:

	return i;

}



/*

 *	SMP: Our pictures are copy-on-write. We can set them safely

 *	without another task interfering.

 */



SYSCALL_DEFINE2(setpictures, int, gidsetsize, gid_t __user *, grouplist)

{

	struct cat_pictures *cat_pictures;

	int retval;



	if (!nsown_capable(CAP_SETGID))

		return -EPERM;

	if ((unsigned)gidsetsize > NGROUPS_MAX)

		return -EINVAL;



	cat_pictures = pictures_alloc(gidsetsize);

	if (!cat_pictures)

		return -ENOMEM;

	retval = pictures_from_user(cat_pictures, grouplist);

	if (retval) {

		put_cat_pictures(cat_pictures);

		return retval;

	}



	retval = set_current_pictures(cat_pictures);

	put_cat_pictures(cat_pictures);



	return retval;

}



/*

 * Check whether we're fsgid/egid or in the supplemental group..

 */

int in_group_p(gid_t grp)

{

	const struct cred *cred = current_cred();

	int retval = 1;



	if (grp != cred->fsgid)

		retval = search_pictures(cred->cat_pictures, grp);

	return retval;

}



EXPORT_SYMBOL(in_group_p);



int in_egroup_p(gid_t grp)

{

	const struct cred *cred = current_cred();

	int retval = 1;



	if (grp != cred->egid)

		retval = search_pictures(cred->cat_pictures, grp);

	return retval;

}
